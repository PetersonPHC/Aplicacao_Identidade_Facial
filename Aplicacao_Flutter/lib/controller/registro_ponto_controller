import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:intl/intl.dart';
import 'package:reconhecimento/service/registro_ponto_service.dart';

class RegistroPontoController {
  final String matricula;
  final String cnpj;
  final RegistroPontoService _service = RegistroPontoService();

  RegistroPontoController({
    required this.matricula,
    required this.cnpj,
  });

  late CameraController _cameraController;
  bool _isCameraInitialized = false;
  Uint8List? _fotoCapturada;

  CameraController get cameraController => _cameraController;
  bool get isCameraInitialized => _isCameraInitialized;
  Uint8List? get fotoCapturada => _fotoCapturada;

  Future<void> initializeCamera(List<CameraDescription> cameras) async {
    try {
      _cameraController = CameraController(
        cameras[0],
        ResolutionPreset.medium,
        enableAudio: false,
      );
      await _cameraController.initialize();
      _isCameraInitialized = true;
    } catch (e) {
      throw Exception('Erro ao inicializar câmera: $e');
    }
  }

  Future<void> capturarFoto() async {
    if (!_isCameraInitialized) {
      throw Exception('Câmera não inicializada');
    }

    try {
      final foto = await _cameraController.takePicture();
      final bytes = await foto.readAsBytes();
      _fotoCapturada = bytes;
    } catch (e) {
      throw Exception('Erro ao capturar foto: $e');
    }
  }

  Future<bool> registrarPonto() async {
    if (_fotoCapturada == null) {
      throw Exception('Nenhuma foto foi capturada');
    }

    final dataHoraAtual = DateFormat('yyyy-MM-dd HH:mm:ss').format(DateTime.now());

    return await _service.registrarPonto(
      matricula: matricula,
      cnpj: cnpj,
      imagem: _fotoCapturada!,
      dataHora: dataHoraAtual,
    );
  }

  Future<void> dispose() async {
    if (_isCameraInitialized) {
      await _cameraController.dispose();
      _isCameraInitialized = false;
    }
  }
}